local AntiExploit = lib.class("AntiExploit")

-- Rate limiting storage
local rateLimits = {}
local suspiciousActivity = {}

function AntiExploit:constructor()
    self.config = Config.exploitProtection
    
    -- Clean up old rate limit entries every minute
    CreateThread(function()
        lib.cron.new('*/1 * * * *', function()
            local currentTime = GetGameTimer()
            for source, data in pairs(rateLimits) do
                if currentTime - data.lastReset > 60000 then
                    rateLimits[source] = nil
                end
            end
        end)
    end)
end

function AntiExploit:checkRateLimit(source)
    if not self.config.enableRateLimiting then
        return true
    end
    
    local currentTime = GetGameTimer()
    
    if not rateLimits[source] then
        rateLimits[source] = {
            attempts = 1,
            lastReset = currentTime
        }
        return true
    end
    
    local data = rateLimits[source]
    
    -- Reset counter if more than a minute has passed
    if currentTime - data.lastReset > 60000 then
        data.attempts = 1
        data.lastReset = currentTime
        return true
    end
    
    data.attempts = data.attempts + 1
    
    if data.attempts > self.config.maxAttemptsPerMinute then
        self:logSuspiciousActivity(source, "RATE_LIMIT_EXCEEDED", {
            attempts = data.attempts,
            timeWindow = currentTime - data.lastReset
        })
        return false
    end
    
    return true
end

function AntiExploit:validatePlayerDistance(sourceId, targetId)
    if not self.config.checkPlayerDistance then
        return true
    end
    
    local sourcePlayer = GetPlayerPed(sourceId)
    local targetPlayer = GetPlayerPed(targetId)
    
    if not sourcePlayer or not targetPlayer then
        return false
    end
    
    local sourceCoords = GetEntityCoords(sourcePlayer)
    local targetCoords = GetEntityCoords(targetPlayer)
    local distance = #(sourceCoords - targetCoords)
    
    if distance > Config.maxTransactionDistance then
        self:logSuspiciousActivity(sourceId, "DISTANCE_EXPLOIT", {
            distance = distance,
            maxAllowed = Config.maxTransactionDistance,
            targetId = targetId
        })
        return false
    end
    
    return true
end

function AntiExploit:validateVehicleDistance(playerId, vehicleNetId)
    if not vehicleNetId then
        return false
    end
    
    local vehicle = NetworkGetEntityFromNetworkId(vehicleNetId)
    if not vehicle or not DoesEntityExist(vehicle) then
        return false
    end
    
    local playerPed = GetPlayerPed(playerId)
    local playerCoords = GetEntityCoords(playerPed)
    local vehicleCoords = GetEntityCoords(vehicle)
    local distance = #(playerCoords - vehicleCoords)
    
    if distance > Config.maxVehicleDistance then
        self:logSuspiciousActivity(playerId, "VEHICLE_DISTANCE_EXPLOIT", {
            distance = distance,
            maxAllowed = Config.maxVehicleDistance,
            vehicleNetId = vehicleNetId
        })
        return false
    end
    
    return true
end

function AntiExploit:validateVehicleOwnership(citizenId, plate)
    if not self.config.validateVehicleOwnership then
        return true
    end
    
    local vehicleInfo = Framework:GetVehicleInformation(citizenId, plate)
    return vehicleInfo ~= nil
end

function AntiExploit:preventSelfTransfer(sourceId, targetId)
    if not self.config.preventSelfTransfer then
        return true
    end
    
    local sourcePlayer = Framework:GetPlayer(sourceId)
    local targetPlayer = Framework:GetPlayer(targetId)
    
    if not sourcePlayer or not targetPlayer then
        return false
    end
    
    if sourcePlayer.PlayerData.citizenid == targetPlayer.PlayerData.citizenid then
        self:logSuspiciousActivity(sourceId, "SELF_TRANSFER_ATTEMPT", {
            citizenId = sourcePlayer.PlayerData.citizenid,
            targetId = targetId
        })
        return false
    end
    
    return true
end

function AntiExploit:validateBothPlayersOnline(sourceId, targetId)
    if not self.config.requireBothPlayersOnline then
        return true
    end
    
    local sourcePlayer = Framework:GetPlayer(sourceId)
    local targetPlayer = Framework:GetPlayer(targetId)
    
    return sourcePlayer ~= nil and targetPlayer ~= nil
end

function AntiExploit:logSuspiciousActivity(source, activityType, data)
    if not self.config.logSuspiciousActivity then
        return
    end
    
    local player = Framework:GetPlayer(source)
    local citizenId = player and player.PlayerData.citizenid or "UNKNOWN"
    
    local logEntry = {
        timestamp = os.date("%Y-%m-%d %H:%M:%S"),
        source = source,
        citizenId = citizenId,
        activityType = activityType,
        data = data
    }
    
    if not suspiciousActivity[source] then
        suspiciousActivity[source] = {}
    end
    
    table.insert(suspiciousActivity[source], logEntry)
    
    -- Log to console
    print(("^3[ANTI-EXPLOIT] ^7%s | Source: %s | CitizenId: %s | Type: %s"):format(
        logEntry.timestamp, source, citizenId, activityType
    ))
    
    -- If too many suspicious activities, consider banning/kicking
    if #suspiciousActivity[source] >= 5 then
        self:handleRepeatedOffender(source)
    end
end

function AntiExploit:handleRepeatedOffender(source)
    -- This can be customized based on your server's punishment system
    print(("^1[ANTI-EXPLOIT] ^7Player %s has triggered multiple security violations"):format(source))
    
    -- Example: Drop player
    -- DropPlayer(source, "Security violation: Multiple exploit attempts detected")
    
    -- Example: Notify admins
    -- TriggerEvent('admin:notify', source, 'Multiple exploit attempts detected')
end

function AntiExploit:validateContract(contractData)
    if not contractData then
        return false, "Invalid contract data"
    end
    
    local requiredFields = {
        "currentOwnerId",
        "currentOwnerCitizenID", 
        "newOwnerId",
        "newOwnerCitizenID",
        "vehicle"
    }
    
    for _, field in ipairs(requiredFields) do
        if not contractData[field] then
            return false, ("Missing required field: %s"):format(field)
        end
    end
    
    if contractData.vehicle and not contractData.vehicle.plate then
        return false, "Vehicle plate is required"
    end
    
    return true
end

return AntiExploit 